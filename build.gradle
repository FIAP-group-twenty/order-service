plugins {
	id 'org.jetbrains.kotlin.jvm' version '1.9.25'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.9.25'
	id 'org.springframework.boot' version '3.4.0'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'org.jetbrains.kotlin.plugin.jpa' version '1.9.25'
    id 'org.sonarqube' version '6.0.1.5171'
    id 'jacoco'
}

group = 'com.order'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-mysql'
	implementation 'org.jetbrains.kotlin:kotlin-reflect'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	runtimeOnly 'com.mysql:mysql-connector-j'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'io.mockk:mockk:1.13.13'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
}

kotlin {
	compilerOptions {
		freeCompilerArgs.addAll '-Xjsr305=strict'
	}
}

allOpen {
	annotation 'jakarta.persistence.Entity'
	annotation 'jakarta.persistence.MappedSuperclass'
	annotation 'jakarta.persistence.Embeddable'
}

tasks.named('test') {
	useJUnitPlatform()
}
sonarqube {
	properties {
		property("sonar.projectKey", "group-twenty_order-service")
		property("sonar.organization", "group-twenty")
		property("sonar.host.url", project.findProperty("SONAR_HOST_URL") ?: "")
		property("sonar.login", project.findProperty("SONAR_TOKEN") ?: "")
		property("sonar.kotlin.language.level", "1.9")
		property("sonar.sources", "src/main/kotlin")
		property("sonar.tests", "src/test/kotlin")
	}
}
tasks.test {
	finalizedBy(tasks.jacocoTestReport)
	useJUnitPlatform()
	testLogging {
		events("passed", "failed", "skipped")
	}
	reports {
		junitXml.required.set(true)
		junitXml.outputLocation.set(file("${project.projectDir}/test-results/test"))
		junitXml.setDestination(file("${project.projectDir}/test-results/test"))
		html.required.set(true)
		html.outputLocation.set(file("${project.projectDir}/test-results/test"))
	}
}